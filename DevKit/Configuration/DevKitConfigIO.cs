using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using TaleWorlds.ModuleManager;

namespace DevKit.Configuration;

/// <summary>
/// Handles reading and writing DevKitConfig to/from disk.
/// Automatically loads configuration on first access.
/// </summary>
public static class DevKitConfigIO
{
    private static readonly string ConfigFilePath;
    private static bool _isInitialized;

    static DevKitConfigIO()
    {
        try
        {
            // Get module directory using ModuleHelper
            var modulePath = ModuleHelper.GetModuleFullPath("DevKit");
            ConfigFilePath = Path.Combine(modulePath ?? string.Empty, "DevKitConfig.ini");

            Load();
            _isInitialized = true;
        }
        catch (Exception ex)
        {
            // In case of initialization error, log to TaleWorlds debug system if available
            TaleWorlds.Library.Debug.PrintError(
                $"[DevKit] Failed to initialize config: {ex.Message}"
            );
        }
    }

    public static void Save()
    {
        if (!_isInitialized)
            return;

        try
        {
            var lines = new List<string>
            {
                "# DevKit Configuration File",
                "# This file is automatically generated and updated when settings change.",
                "# Format: Key=Value",
                ""
            };

            // Use reflection to get all public static fields from DevKitConfig
            var fields = typeof(DevKitConfig).GetFields(BindingFlags.Public | BindingFlags.Static);

            foreach (var field in fields)
            {
                // Skip non-configuration fields (const, readonly, etc.)
                if (field.IsLiteral || field.IsInitOnly)
                    continue;

                var value = field.GetValue(null);
                lines.Add($"{field.Name}={value}");
            }

            File.WriteAllLines(ConfigFilePath, lines);
            TaleWorlds.Library.Debug.Print($"[DevKit] Configuration saved to {ConfigFilePath}");
        }
        catch (Exception ex)
        {
            TaleWorlds.Library.Debug.PrintError($"[DevKit] Failed to save config: {ex.Message}");
        }
    }

    public static void Load()
    {
        try
        {
            if (!File.Exists(ConfigFilePath))
            {
                // Create default configuration file
                Save();
                return;
            }

            var lines = File.ReadAllLines(ConfigFilePath);
            var fields = typeof(DevKitConfig).GetFields(BindingFlags.Public | BindingFlags.Static);

            foreach (var line in lines)
            {
                if (string.IsNullOrWhiteSpace(line) || line.TrimStart().StartsWith("#"))
                    continue;

                var parts = line.Split(['='], 2);
                if (parts.Length != 2)
                    continue;

                var key = parts[0].Trim();
                var value = parts[1].Trim();

                // Find matching field in DevKitConfig
                var field = fields.FirstOrDefault(f => f.Name == key);
                if (field == null || field.IsLiteral || field.IsInitOnly)
                    continue;

                // Parse and set value based on field type
                try
                {
                    if (field.FieldType == typeof(bool))
                    {
                        if (bool.TryParse(value, out var boolValue))
                            field.SetValue(null, boolValue);
                    }
                    else if (field.FieldType == typeof(int))
                    {
                        if (int.TryParse(value, out var intValue))
                            field.SetValue(null, intValue);
                    }
                    else if (field.FieldType == typeof(float))
                    {
                        if (float.TryParse(value, out var floatValue))
                            field.SetValue(null, floatValue);
                    }
                    else if (field.FieldType == typeof(string))
                    {
                        field.SetValue(null, value);
                    }
                }
                catch (Exception ex)
                {
                    TaleWorlds.Library.Debug.PrintError(
                        $"[DevKit] Failed to set config value {key}: {ex.Message}"
                    );
                }
            }

            TaleWorlds.Library.Debug.Print($"[DevKit] Configuration loaded from {ConfigFilePath}");
        }
        catch (Exception ex)
        {
            TaleWorlds.Library.Debug.PrintError($"[DevKit] Failed to load config: {ex.Message}");
        }
    }
}
